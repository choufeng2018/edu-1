<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jeeplus.modules.school.dao.TSchoolTeacherDao">
    
	<sql id="tSchoolTeacherColumns">
		a.id AS "id",
		a.school_id AS "schoolId",
		a.campus_id AS "campus.id",
		a.number AS "number",
		a.name AS "name",
		a.account AS "account",
		a.password AS "password",
		a.level AS "level",
		a.sex AS "sex",
		a.status AS "status",
		a.birthday AS "birthday",
		a.age AS "age",
		a.type AS "type",
		a.wx AS "wx",
		a.email AS "email",
		a.tel AS "tel",
		a.isoto AS "isoto",
		a.course AS "course.id",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag",
		so.name AS "campus.name",
		cs.subject_name AS "course.subjectName",
		c.price AS "price",
		c.cmin AS "cmin"
	</sql>
	
	<sql id="tSchoolTeacherJoins">
	LEFT JOIN sys_office so ON so.id = a.campus_id
	left join t_comm_subject cs on a.course = cs.id
	left join t_school_teacher_conf c on a.id = c.t_id
	</sql>
	
    
	<select id="get" resultType="TSchoolTeacher" >
		SELECT 
			<include refid="tSchoolTeacherColumns"/>
		FROM t_school_teacher a
		<include refid="tSchoolTeacherJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="getUserByTel" resultType="TSchoolTeacher" >
		SELECT 
			<include refid="tSchoolTeacherColumns"/>
		FROM t_school_teacher a
		<include refid="tSchoolTeacherJoins"/>
		WHERE a.school_id = #{schoolId} and a.tel = #{tel}
	</select>
	
	<select id="getUserByAccount" resultType="TSchoolTeacher" >
		SELECT 
			<include refid="tSchoolTeacherColumns"/>
		FROM t_school_teacher a
		<include refid="tSchoolTeacherJoins"/>
		WHERE a.account = #{account}
	</select>
	
	<select id="findList" resultType="TSchoolTeacher" >
		SELECT 
			<include refid="tSchoolTeacherColumns"/>
		FROM t_school_teacher a
		<include refid="tSchoolTeacherJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.school_id = #{schoolId}
			
			<if test="name != null and name != ''">
				AND a.name LIKE 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<!-- <if test="dbName == 'mssql'">'%'+#{name}+'%'</if> -->
					<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
			</if>
			<!-- ${sqlMap.sqlmap}-->
			<if test="campus != null and campus.id != null and campus.id != ''">
				AND a.campus_id = #{campus.id}
			</if> 
			<if test="course != null and course.id != null and course.id != ''">
				AND a.course = #{course.id}
			</if>
			<if test="status != null">
				AND a.status = #{status}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="TSchoolTeacher" >
		SELECT 
			<include refid="tSchoolTeacherColumns"/>
		FROM t_school_teacher a
		<include refid="tSchoolTeacherJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.school_id = #{schoolId}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO t_school_teacher(
			school_id,
			campus_id,
			number,
			name,
			account,
			password,
			level,
			sex,
			status,
			isoto,
			birthday,
			age,
			type,
			wx,
			email,
			tel,
			course,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{schoolId},
			#{campus.id},
			#{number},
			#{name},
			#{account},
			#{password},
			#{level},
			#{sex},
			#{status},
			#{isoto},
			#{birthday},
			#{age},
			#{type},
			#{wx},
			#{email},
			#{tel},
			#{course.id},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE t_school_teacher SET 	
			school_id = #{schoolId},
			campus_id = #{campus.id},
			number = #{number},
			name = #{name},
			account = #{account},
			password = #{password},
			level = #{level},
			sex = #{sex},
			status = #{status},
			isoto = #{isoto},
			birthday = #{birthday},
			age = #{age},
			type = #{type},
			wx = #{wx},
			email = #{email},
			tel = #{tel},
			course = #{course.id},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM t_school_teacher
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE t_school_teacher SET del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="TSchoolTeacher" statementType="STATEMENT">
		select * FROM t_school_teacher  where ${propertyName} = '${value}'
	</select>
	
</mapper>